openapi: 3.0.1
info:
  title: Cadence Patch Server
  version: "0.1"
  description: |
    Minimal endpoints to let a Custom GPT apply diffs and create commits/PRs.
    Secure with a Bearer token. Intended to run locally behind ngrok.
servers:
  - url: https://YOUR-NGROK-ID.ngrok.app
paths:
  /health:
    get:
      summary: Health check
      responses:
        "200":
          description: OK
  /apply:
    post:
      summary: Apply a unified diff (patch) to the working tree
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              example: |
                --- a/src/Foo.cs
                +++ b/src/Foo.cs
                @@ -1,3 +1,3 @@
                -old
                +new
      responses:
        "200":
          description: Applied
  /commit:
    post:
      summary: Commit staged changes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message]
              properties:
                message: { type: string }
      responses:
        "200":
          description: Committed
  /branch:
    post:
      summary: Create/switch to a branch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
      responses:
        "200":
          description: Switched
  /push:
    post:
      summary: Push HEAD to origin/<branch>
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [branch]
              properties:
                branch: { type: string }
      responses:
        "200":
          description: Pushed
  /pr:
    post:
      summary: Create a pull request on GitHub
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [owner, repo, title, head, base]
              properties:
                owner: { type: string }
                repo: { type: string }
                title: { type: string }
                head: { type: string }
                base: { type: string }
      responses:
        "200":
          description: PR created
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
