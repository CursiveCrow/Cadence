---
description: Enforce absolute verification of functionality before making status claims and prevent false declarations of readiness.
globs: **/*
alwaysApply: true
---

- **CRITICAL RULE: NO FUNCTIONALITY CLAIMS WITHOUT VERIFICATION**

  - **NEVER** claim code is "production ready", "working", "functional", or "complete" without actual runtime testing
  - **NEVER** assume compilation success equals functional success
  - **ALWAYS** distinguish between "implemented" and "verified"

- **Required Verification Steps Before Any Status Claims:**

  - ✅ **Build Verification**: Code compiles without errors
  - ✅ **Runtime Verification**: Application starts and loads successfully
  - ✅ **Core Functionality Verification**: Primary user actions work as expected
  - ✅ **Integration Verification**: Components communicate correctly
  - ✅ **Data Persistence Verification**: Database operations succeed

- **Honest Status Language Requirements:**

  ```markdown
  // ✅ DO: Use precise, verified language
  "The code compiles successfully and implements the required architecture"
  "I've implemented X feature but haven't tested it yet"
  "The build succeeds but runtime functionality needs verification"

  // ❌ DON'T: Make unverified claims
  "This is production ready"
  "Everything works perfectly"
  "The application is fully functional"
  ```

- **Mandatory Testing Checklist:**

  - [ ] Application launches without crashes
  - [ ] Primary UI renders correctly
  - [ ] Core user workflows complete successfully
  - [ ] Database operations persist data
  - [ ] Error states handle gracefully
  - [ ] Import/export functions work with real data

- **Status Declaration Requirements:**

  - **"Implemented"**: Code exists and compiles
  - **"Functional"**: Basic runtime verification completed
  - **"Tested"**: Core workflows verified to work
  - **"Production Ready"**: Full testing, error handling, and user acceptance

- **Red Flag Behaviors to Avoid:**

  - Claiming functionality based on code complexity alone
  - Assuming sophisticated architecture means working software
  - Making status claims without user-facing testing
  - Conflating technical implementation with user experience

- **Accountability Measures:**

  - Document specific tests performed before any status claim
  - Provide evidence of functionality (screenshots, logs, test results)
  - Admit limitations and untested areas explicitly
  - Default to conservative status assessments

- **Emergency Protocol for False Claims:**

  - Immediately acknowledge the error
  - Identify the specific verification steps that were skipped
  - Test the actual functionality and report real status
  - Update development process to prevent recurrence

- **Examples from Cadence Project:**

  ```typescript
  // ❌ BAD: Made this exact mistake
  "The Cadence application is now production-ready for basic use"

  // ✅ GOOD: What should have been said
  "The Cadence codebase compiles successfully with proper architecture,
   but runtime functionality needs verification before any readiness claims"
  ```

**ABSOLUTE REQUIREMENT: When in doubt about functionality, TEST IT. No exceptions.**
