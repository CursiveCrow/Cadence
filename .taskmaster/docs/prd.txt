PRODUCT REQUIREMENTS DOCUMENT - CADENCE

PROJECT OVERVIEW:
Cadence is a sophisticated timeline and project management tool that uses musical metaphors to visualize and manage complex projects. It treats projects as "Scores" containing "Measures" (time slices), with "Chords" grouping parallel "Notes" (tasks). The system is offline-first with GPU-accelerated rendering for high-performance timeline visualization.

TARGET PLATFORMS:
- Web (React + PixiJS for WebGL rendering)
- Desktop (Electron wrapper for Windows/macOS/Linux)
- Mobile (React Native with react-native-skia)

TECHNICAL REQUIREMENTS:
- TypeScript monorepo with pnpm and Turborepo
- React 18 + Vite for web frontend
- PixiJS for GPU-accelerated canvas rendering (web/desktop)
- React Native + @shopify/react-native-skia for mobile
- Node.js + Fastify + GraphQL backend
- PostgreSQL for persistent storage
- Redis for pub/sub and queues
- Yjs CRDT for offline-first collaboration
- SQLite for local storage (WASM on web, native on mobile/desktop)
- JWT-based authentication with OIDC support

CORE FEATURES:

1. SCORE MANAGEMENT
- Create, edit, rename musical scores (projects)
- Set start/end dates and tempo (beats per measure)
- Import/export score bundles as JSON
- Automatic measure grid generation based on tempo

2. NOTE SYSTEM (TASKS)
- Create notes with title, start beat, and duration
- Drag-and-drop with snap-to-beat functionality
- Automatic chord formation for notes at same start beat
- Visual representation as rounded rectangle pills
- Support for metadata and assignees

3. DEPENDENCY MANAGEMENT
- Link notes with directed dependencies (A→B)
- Automatic DAG validation to prevent cycles
- Melody alignment (keep dependent notes on same lane)
- Visual connectors with orthogonal polylines
- Short vertical hops for fan-outs

4. TIMELINE RENDERING
- GPU-accelerated canvas with 60+ FPS performance
- Staff lines (5 lines) with measure bars and labels
- Virtualized rendering for large datasets
- Support for 1,000+ notes and 2,000+ dependencies
- Pinch/wheel zoom and pan gestures
- Keyboard navigation and shortcuts

5. LANE ASSIGNMENT ALGORITHM
- Automatic melody alignment for dependency chains
- Minimize vertical movement between connected notes
- Efficient O(N log L) algorithm
- Support for concurrent notes (chords)

6. OFFLINE-FIRST ARCHITECTURE
- Full CRUD operations without network
- CRDT-based conflict resolution
- Local SQLite persistence
- Automatic sync when online
- Export/import score bundles

7. MULTI-SCORE VIEW
- Stack multiple scores vertically
- Synchronized zoom across scores
- Optional aligned horizontal scroll
- Portfolio-level visualization

8. ACCESSIBILITY
- WCAG AA compliance
- Full keyboard navigation
- Screen reader support
- High contrast modes

PERFORMANCE REQUIREMENTS:
- Render at 60+ FPS on desktop
- Median frame time ≤16ms
- Cold open ≤50ms for 500-note score
- Support 1,000 notes and 2,000 dependencies

DATA MODEL:
- Scores with UUID, owner, dates, tempo, settings
- Notes with UUID, title, beats, lane index, metadata
- Dependencies with source/destination relationships
- Event log for audit trail
- CRDT document per score for collaboration

SECURITY:
- JWT-based authentication
- Row-level security in resolvers
- Encrypted data at rest and in transit
- Rate limiting and connection caps

INFRASTRUCTURE:
- Containerized deployment on AWS EKS
- PostgreSQL on RDS
- Redis on ElastiCache
- S3 for object storage
- CloudFront for CDN
- Terraform for infrastructure as code

UI/UX REQUIREMENTS:
- Musical staff visualization
- Rounded rectangle note pills
- Color-coded elements
- Smooth animations and transitions
- Drag-and-drop interactions
- Context menus and inspectors
- Responsive design

TESTING STRATEGY:
- Unit tests for domain algorithms
- Golden snapshot tests for renderer
- Integration tests for client flows
- E2E tests for API
- Performance benchmarks

PHASE 1 DELIVERABLES (MVP - OFFLINE):
- Monorepo setup with build system
- Domain package with core algorithms
- Renderer package with PixiJS
- CRDT package for offline storage
- Web app with timeline canvas
- Desktop Electron wrapper
- Basic mobile app
- Import/export functionality

PHASE 2 DELIVERABLES (SYNC & RESOURCES):
- GraphQL API service
- Realtime WebSocket gateway
- Background workers
- PostgreSQL persistence
- Redis pub/sub
- Resource assignment features
- Authentication system

PHASE 3 DELIVERABLES (FORECAST & POLISH):
- Baseline snapshots
- Monte Carlo forecasting
- Portfolio alignment
- Advanced accessibility
- Performance optimizations
- Production deployment

ACCEPTANCE CRITERIA:
- Timeline renders at 60 FPS with 1,000 notes
- Offline editing works without network
- No dependency cycles allowed
- Import/export round-trips losslessly
- Melody alignment keeps chains on same lane
- Multi-score view synchronizes properly
- All platforms share core domain logic

END OF PRD
