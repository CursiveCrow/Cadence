export interface WebGPUStatus { available: boolean; rendererType: 'webgpu' | 'webgl' | 'unknown'; message: string }
export async function checkWebGPUAvailability(): Promise<WebGPUStatus> { try { if (!('gpu' in navigator)) { return { available: false, rendererType: 'webgl', message: 'WebGPU API not available in this browser. Using WebGL fallback.' } } const adapter = await (navigator as unknown as { gpu: { requestAdapter: () => Promise<unknown> } }).gpu.requestAdapter(); if (!adapter) { return { available: false, rendererType: 'webgl', message: 'WebGPU adapter not available. Using WebGL fallback.' } } return { available: true, rendererType: 'webgpu', message: 'WebGPU adapter is available. Will attempt to use WebGPU renderer.' } } catch (error) { console.error('WebGPU check error:', error); return { available: false, rendererType: 'unknown', message: `Error checking WebGPU: ${error instanceof Error ? error.message : 'Unknown error'}` } } }
export function logWebGPUStatus(status: WebGPUStatus): void { const style = status.available ? 'background: #10b981; color: white; padding: 4px 8px; border-radius: 4px;' : 'background: #f59e0b; color: white; padding: 4px 8px; border-radius: 4px;'; console.log('%c WebGPU Status ', style, status.message); console.log('Renderer Type:', status.rendererType.toUpperCase()); if (!status.available) { console.log('Note: The application will use WebGL as a fallback, which is fully supported.') } }
export function logRendererPreference(status: WebGPUStatus, chosen: 'webgpu' | 'webgl'): void { const msg = `Chosen renderer: ${chosen.toUpperCase()} (${status.available ? 'WebGPU available' : 'WebGPU unavailable'})`; const style = chosen === 'webgpu' ? 'background: #2563eb; color: white; padding: 2px 6px; border-radius: 4px;' : 'background: #6b7280; color: white; padding: 2px 6px; border-radius: 4px;'; console.log('%c Renderer Preference ', style, msg) }

